<?php
define('DR_CACHE_IN_FILES', false); 	// which approach we are using: FILES or MEMCACHED
define('DR_CACHE_CHILD_DIR', '/cache/');
define('DR_CACHEFILE_PREFIX', 'zu_cache2_');
if(function_exists('zu_get_theme_dir')) define('DR_CACHE_DIR', zu_get_theme_dir().DR_CACHE_CHILD_DIR);
else define('DR_CACHE_DIR', WP_CONTENT_DIR.DR_CACHE_CHILD_DIR);

trait zu_PlusCache {
    private $filename;
    private $cachedir;
    private $ext;
    private $lang;
    private $name;
    private $expire = (30 * DAY_IN_SECONDS); // Set expire for 30 days

    public function __construct($name, $ext = 'php') {
        $this->cachedir = DR_CACHE_DIR;
        $this->lang = zu_cache_lang_suffix();
        $this->name = $name;
		$this->filename = sprintf('%1$s%2$s%3$s.%4$s', DR_CACHEFILE_PREFIX, md5($name), $this->lang, $ext);
        $this->ext = $ext;
    }

    public function check() {
	    if(DR_CACHE_IN_FILES) {
	        if(file_exists($this->cachedir.$this->filename)) return true;
	        return false;
	    } else {
		    $found = wp_cache_get($this->filename, 'zu_cache');
/*
$message = sprintf('[%1$s] %4$s          =>%2$s          $found=%3$s', date('d.m H:i'), __FUNCTION__, ($found ? strlen($found) : 'false'), strtoupper(zu_cache_lang_suffix(false)));
_dbug_log($message);
*/
		    return ($found == false) ? false : true;
	    }
    }

    public function retrieve() {
	    if(DR_CACHE_IN_FILES) {
	        if($this->check()) {
	            return file_get_contents($this->cachedir.$this->filename);
	        }
	        return false;
		} else {
		    return wp_cache_get($this->filename, 'zu_cache');
		}
    }

    public function cache($code) {

	    if(in_array($this->ext, array('php', 'html'))) $code = $this->snippets('minify_html', $code, false);
	    else if(in_array($this->ext, array('css'))) $code = $this->snippets('minify_css', $code);

	    if(DR_CACHE_IN_FILES) {
	        $filename = $this->cachedir.$this->filename;
	        file_put_contents($filename, $code, LOCK_EX); 		// Write code to cache without doing anything else
		} else {
		    wp_cache_set($this->filename, $code, 'zu_cache', $this->expire);
		}
    }

    public function get_name() {
        return $this->filename;
    }

    public function get_codename() {
        return $this->name;
    }

	public function clear() {
		global $q_config;

        if(zu_cache_no_avail()) return false;

		$langs = (!is_null($q_config) && isset($q_config['enabled_languages'])) ? $q_config['enabled_languages'] : array('');
		$name_without_lang = str_replace(sprintf('%1$s.%2$s', $this->lang, $this->ext), '', $this->filename);

		foreach($langs as $language) {

			$file = sprintf('%1$s_%2$s.%3$s', $name_without_lang, $language, $this->ext);

		    if(DR_CACHE_IN_FILES) {
				$file = $this->cachedir.$file;
				if(is_file($file)) unlink($file);
			} else {
			    wp_cache_delete($file, 'zu_cache');
			}
		}
        return true;
    }

    static function clear_all() {
        if(zu_cache_no_avail()) return false;

		if(DR_CACHE_IN_FILES) {
	         $scaned = scandir(DR_CACHE_DIR); // scan the cachedirs

	        // clear the cachedirs
	        $thisCacheDir = rtrim(DR_CACHE_DIR, '/').'/';
	        foreach($scaned as $file) {
	            if(!in_array($file, array('.', '..')) && strpos($file, DR_CACHEFILE_PREFIX) !== false && is_file($thisCacheDir.$file)) {
	                unlink($thisCacheDir.$file);
	            }
	        }
        }

        return true;
    }

    static function stats()    {
        $zu_stats = get_transient('zu_cache_stats');

        if(DR_CACHE_IN_FILES && empty($zu_stats)) {

            if(zu_cache_no_avail()) return 0;  // Cache not available :(

            // Count cached info
            $count = 0;
            $size = 0;

	        $scaned = scandir(DR_CACHE_DIR); // scan the cachedirs

	        // clear the cachedirs
	        $thisCacheDir = rtrim(DR_CACHE_DIR, '/').'/';
	        foreach($scaned as $file) {
	            if(!in_array($file, array('.', '..')) && strpos($file, DR_CACHEFILE_PREFIX) !== false) {
		            if(is_file($thisCacheDir.$file)) {
		                $count++;
		                $size += filesize($thisCacheDir.$file);
	                }
	            }
	        }

            $zu_stats = array($count, $size, time());
            if($count > 100) set_transient('zu_cache_stats', $zu_stats, HOUR_IN_SECONDS);
        }
        // print the number of instances
        return $zu_stats;
    }

    static function cache_avail() {

		if(!DR_CACHE_IN_FILES) return true;

        if(!defined('DR_CACHE_DIR')) return false;
        if(!zu_cache::check_cache_dir(DR_CACHE_DIR)) return false;

        // write index.html here to avoid prying eyes
        $indexFile = DR_CACHE_DIR.'/index.html';
        if(!is_file($indexFile)) file_put_contents($indexFile, '<html><head><meta name="robots" content="noindex, nofollow"></head><body>Generated by zu_cache</body></html>');

        return true;
    }

    static function check_cache_dir($dir) {
        // Check and create if not exists
        if(!file_exists($dir))    {

            mkdir($dir, 0775, true);
            if(!file_exists($dir))   return false;
        }

        // check if we can now write
        if(!is_writable($dir))    return false;

        return true;
    }

    //// исправленное!
    public function reset_cached() {
        $count = $this->purge_transients();
        $message = sprintf(
			'All cached shortcodes (<span class="_bold">%1$s %2$s</span>) were reset.',
            $count,
            $count > 1 ? 'transients' : 'transient'
        );
		return $this->create_notice('info', $count ? $message : 'No cached shortcodes found.');
    }

}

function zu_cache_no_avail() {
	return !zu_cache::cache_avail();
}

function zu_cache_lang_suffix($add_underscore = true) {
	global $q_config;
	$cur_lang = (!is_null($q_config) && isset($q_config['language'])) ? $q_config['language'] : '';

	return empty($cur_lang) ? $cur_lang : sprintf('%2$s%1$s',  $cur_lang, ($add_underscore ? '_' : ''));
}
