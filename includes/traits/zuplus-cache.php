<?php
define('DR_CACHE_IN_FILES', false); 	// which approach we are using: FILES or MEMCACHED
define('DR_CACHE_CHILD_DIR', '/cache/'); 
define('DR_CACHEFILE_PREFIX', 'zu_cache2_'); 
if(function_exists('zu_get_theme_dir')) define('DR_CACHE_DIR', zu_get_theme_dir().DR_CACHE_CHILD_DIR);
else define('DR_CACHE_DIR', WP_CONTENT_DIR.DR_CACHE_CHILD_DIR);

class zu_cache {
    private $filename;
    private $cachedir;
    private $ext;
    private $lang;
    private $name;
    private $expire = (30 * DAY_IN_SECONDS); // Set expire for 30 days
    
    public function __construct($name, $ext = 'php') {
        $this->cachedir = DR_CACHE_DIR;
        $this->lang = zu_cache_lang_suffix();
        $this->name = $name;
		$this->filename = sprintf('%1$s%2$s%3$s.%4$s', DR_CACHEFILE_PREFIX, md5($name), $this->lang, $ext);
        $this->ext = $ext;
    }
    
    public function check() {
	    if(DR_CACHE_IN_FILES) {
	        if(file_exists($this->cachedir.$this->filename)) return true;
	        return false;
	    } else {
		    $found = wp_cache_get($this->filename, 'zu_cache');
/*
$message = sprintf('[%1$s] %4$s          =>%2$s          $found=%3$s', date('d.m H:i'), __FUNCTION__, ($found ? strlen($found) : 'false'), strtoupper(zu_cache_lang_suffix(false)));
_dbug_log($message);
*/
		    return ($found == false) ? false : true;
	    }
    }
    
    public function retrieve() {
	    if(DR_CACHE_IN_FILES) {
	        if($this->check()) {
	            return file_get_contents($this->cachedir.$this->filename);
	        }
	        return false;
		} else {
		    return wp_cache_get($this->filename, 'zu_cache');
		}
    }
    
    public function cache($code) {
	    
	    if(in_array($this->ext, array('php', 'html'))) $code = zu_cache::minify_HTML($code, false);
	    else if(in_array($this->ext, array('css'))) $code = zu_cache::minify_CSS($code);

	    if(DR_CACHE_IN_FILES) {
	        $filename = $this->cachedir.$this->filename;
	        file_put_contents($filename, $code, LOCK_EX); 		// Write code to cache without doing anything else
		} else {
		    wp_cache_set($this->filename, $code, 'zu_cache', $this->expire);
		}
    }
    
    public function get_name() {
        return $this->filename;
    }

    public function get_codename() {
        return $this->name;
    }
 
	public function clear() {
		global $q_config;

        if(zu_cache_no_avail()) return false;
    
		$langs = (!is_null($q_config) && isset($q_config['enabled_languages'])) ? $q_config['enabled_languages'] : array(''); 
		$name_without_lang = str_replace(sprintf('%1$s.%2$s', $this->lang, $this->ext), '', $this->filename);

		foreach($langs as $language) {

			$file = sprintf('%1$s_%2$s.%3$s', $name_without_lang, $language, $this->ext);
			
		    if(DR_CACHE_IN_FILES) {
				$file = $this->cachedir.$file;
				if(is_file($file)) unlink($file);
			} else {
			    wp_cache_delete($file, 'zu_cache');
			}
		}
        return true;
    }
   
    static function clear_all() {
        if(zu_cache_no_avail()) return false;
    
		if(DR_CACHE_IN_FILES) {
	         $scaned = scandir(DR_CACHE_DIR); // scan the cachedirs  
	        
	        // clear the cachedirs
	        $thisCacheDir = rtrim(DR_CACHE_DIR, '/').'/';
	        foreach($scaned as $file) {
	            if(!in_array($file, array('.', '..')) && strpos($file, DR_CACHEFILE_PREFIX) !== false && is_file($thisCacheDir.$file)) {
	                unlink($thisCacheDir.$file);
	            }
	        }
        }

        return true;
    }

    static function stats()    {
        $zu_stats = get_transient('zu_cache_stats');

        if(DR_CACHE_IN_FILES && empty($zu_stats)) {
            
            if(zu_cache_no_avail()) return 0;  // Cache not available :(
            
            // Count cached info
            $count = 0;
            $size = 0;

	        $scaned = scandir(DR_CACHE_DIR); // scan the cachedirs  
	        
	        // clear the cachedirs
	        $thisCacheDir = rtrim(DR_CACHE_DIR, '/').'/';
	        foreach($scaned as $file) {
	            if(!in_array($file, array('.', '..')) && strpos($file, DR_CACHEFILE_PREFIX) !== false) {
		            if(is_file($thisCacheDir.$file)) {
		                $count++;
		                $size += filesize($thisCacheDir.$file);
	                }
	            }
	        }
            
            $zu_stats = array($count, $size, time());
            if($count > 100) set_transient('zu_cache_stats', $zu_stats, HOUR_IN_SECONDS);
        }
        // print the number of instances
        return $zu_stats;
    }    

    static function cache_avail() {

		if(!DR_CACHE_IN_FILES) return true;
		
        if(!defined('DR_CACHE_DIR')) return false;
        if(!zu_cache::check_cache_dir(DR_CACHE_DIR)) return false;
         
        // write index.html here to avoid prying eyes 
        $indexFile = DR_CACHE_DIR.'/index.html';
        if(!is_file($indexFile)) file_put_contents($indexFile, '<html><head><meta name="robots" content="noindex, nofollow"></head><body>Generated by zu_cache</body></html>');

        return true;
    }

    static function check_cache_dir($dir) {
        // Check and create if not exists
        if(!file_exists($dir))    {
            
            mkdir($dir, 0775, true);
            if(!file_exists($dir))   return false;
        }

        // check if we can now write
        if(!is_writable($dir))    return false;
        
        return true;
    }
	
	static function minify_HTML($buffer, $remove_ending_tags = true) {
	
	//remove redundant (white-space) characters
	$replace = array(
	    //remove tabs before and after HTML tags
	    '/\>[^\S ]+/s'   => '>',
	    '/[^\S ]+\</s'   => '<',
	    //shorten multiple whitespace sequences; keep new-line characters because they matter in JS!!!
	    '/([\t ])+/s'  => ' ',
	    //remove leading and trailing spaces
	    '/^([\t ])+/m' => '',
	    '/([\t ])+$/m' => '',
	    // remove JS line comments (simple only); do NOT remove lines containing URL (e.g. 'src="http://server.com/"')!!!
	    '~//[a-zA-Z0-9 ]+$~m' => '',
	    //remove empty lines (sequence of line-end and white-space characters)
	    '/[\r\n]+([\t ]?[\r\n]+)+/s'  => "\n",
	    //remove empty lines (between HTML tags); cannot remove just any line-end characters because in inline JS they can matter!
	    '/\>[\r\n\t ]+\</s'    => '><',
	    //remove "empty" lines containing only JS's block end character; join with next line (e.g. "}\n}\n</script>" --> "}}</script>"
	    '/}[\r\n\t ]+/s'  => '}',
	    '/}[\r\n\t ]+,[\r\n\t ]+/s'  => '},',
	    //remove new-line after JS's function or condition start; join with next line
	    '/\)[\r\n\t ]?{[\r\n\t ]+/s'  => '){',
	    '/,[\r\n\t ]?{[\r\n\t ]+/s'  => ',{',
	    //remove new-line after JS's line end (only most obvious and safe cases)
	    '/\),[\r\n\t ]+/s'  => '),',
	    //remove quotes from HTML attributes that does not contain spaces; keep quotes around URLs!
	    '~([\r\n\t ])?([a-zA-Z0-9]+)="([a-zA-Z0-9_/\\-]+)"([\r\n\t ])?~s' => '$1$2=$3$4', //$1 and $4 insert first white-space character found before/after attribute
	);
	
	$buffer = preg_replace(array_keys($replace), array_values($replace), $buffer);
	
	//remove optional ending tags (see http://www.w3.org/TR/html5/syntax.html#syntax-tag-omission)
	$remove = array(
	    '</option>', '</li>', '</dt>', '</dd>', '</tr>', '</th>', '</td>'
	);
	$buffer = $remove_ending_tags ? str_ireplace($remove, '', $buffer) : $buffer;
	
	return $buffer;
	}
	
	static function minify_CSS($buffer) {
	//
	// Simple regex CSS minifier/compressor
	// http://stackoverflow.com/questions/15195750/minify-compress-css-with-regex
	// 
	    # remove comments first (simplifies the other regex)
	    $re1 = <<<'EOS'
(?sx)
  # quotes
  (
    "(?:[^"\\]++|\\.)*+"
  | '(?:[^'\\]++|\\.)*+'
  )
|
  # comments
  /\* (?> .*? \*/ )
EOS;

    $re2 = <<<'EOS'
(?six)
  # quotes
  (
    "(?:[^"\\]++|\\.)*+"
  | '(?:[^'\\]++|\\.)*+'
  )
|
  # ; before } (and the spaces after it while we're here)
  \s*+ ; \s*+ ( } ) \s*+
|
  # all spaces around meta chars/operators
  \s*+ ( [*$~^|]?+= | [{};,>~+-] | !important\b ) \s*+
|
  # spaces right of ( [ :
  ( [[(:] ) \s++
|
  # spaces left of ) ]
  \s++ ( [])] )
|
  # spaces left (and right) of :
  \s++ ( : ) \s*+
  # but not in selectors: not followed by a {
  (?!
    (?>
      [^{}"']++
    | "(?:[^"\\]++|\\.)*+"
    | '(?:[^'\\]++|\\.)*+' 
    )*+
    {
  )
|
  # spaces at beginning/end of string
  ^ \s++ | \s++ \z
|
  # double spaces to single
  (\s)\s+
EOS;
	
	    $buffer = preg_replace("%$re1%", '$1', $buffer);
	    return preg_replace("%$re2%", '$1$2$3$4$5$6$7', $buffer);
	}
}

function zu_cache_no_avail() { 
	return !zu_cache::cache_avail(); 
}

function zu_cache_lang_suffix($add_underscore = true) { 
	global $q_config;
	$cur_lang = (!is_null($q_config) && isset($q_config['language'])) ? $q_config['language'] : '';

	return empty($cur_lang) ? $cur_lang : sprintf('%2$s%1$s',  $cur_lang, ($add_underscore ? '_' : ''));
}

function zu_cache_minify_HTML($buffer, $remove_ending_tags = true) { 
	return zu_cache::minify_HTML($buffer, $remove_ending_tags); 
}

function zu_cache_minify_CSS($buffer) { 
	return zu_cache::minify_CSS($buffer); 
}

